ALTER SESSION SET CURRENT_SCHEMA = <new_schema_name>;
-- Create payment_templates table
CREATE TABLE payment_templates (
    template_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    template_name VARCHAR2(100) NOT NULL,
    template_description VARCHAR2(255),
    last_updated DATE,
    last_updated_by VARCHAR2(50),
    mx_message XMLType,
    CONSTRAINT chk_template_name_length CHECK (LENGTH(template_name) <= 100)
);

-- Create mx_params table (formerly mx_templates)
CREATE TABLE mx_params (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    xpath VARCHAR2(100) NOT NULL,
    value VARCHAR2(255),
    last_updated DATE,
    last_updated_by VARCHAR2(50)
);

-- Create validation_params table (formerly payment_template_validation)
CREATE TABLE validation_params (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    field VARCHAR2(100) NOT NULL,
    value VARCHAR2(255)
);

-- Create Indexes for foreign keys
CREATE INDEX idx_payment_template_mx ON mx_templates (template_id);
CREATE INDEX idx_payment_template_mt ON mt_templates (template_id);
CREATE INDEX idx_payment_template_validation ON payment_template_validation (template_id);

CREATE OR REPLACE PROCEDURE add_payment_template (
    p_template_name        IN payment_templates.template_name%TYPE,
    p_template_description IN payment_templates.template_description%TYPE,
    p_mx_message           IN XMLType
) AS
BEGIN
    INSERT INTO payment_templates (
        template_name,
        template_description,
        last_updated,
        last_updated_by,
        mx_message
    ) VALUES (
        p_template_name,
        p_template_description,
        SYSDATE,
        USER,  -- Automatically captures the username of the person executing the procedure
        p_mx_message
    );
END add_payment_template;
/
DECLARE
    v_template_name        payment_templates.template_name%TYPE := 'Sample Template';
    v_template_description payment_templates.template_description%TYPE := 'This is a sample payment template.';
    v_mx_message           XMLType := XMLType('<YourXMLContentHere>');
BEGIN
    add_payment_template(
        p_template_name        => v_template_name,
        p_template_description => v_template_description,
        p_mx_message           => v_mx_message
    );
END;
/

CREATE OR REPLACE PROCEDURE add_mx_params (
    p_xpaths IN SYS.ODCIVARCHAR2LIST,
    p_values IN SYS.ODCIVARCHAR2LIST
) AS
    -- Ensure the input collections have the same size
    l_count INTEGER := p_xpaths.COUNT;
BEGIN
    IF l_count != p_values.COUNT THEN
        RAISE_APPLICATION_ERROR(-20001, 'Input collections must have the same number of elements.');
    END IF;

    -- Bulk insert using FORALL
    FORALL i IN 1..l_count
        INSERT INTO mx_params (
            xpath,
            value,
            last_updated,
            last_updated_by
        ) VALUES (
            p_xpaths(i),
            p_values(i),
            SYSDATE,
            USER
        );
END add_mx_params;
/

DECLARE
    -- Define collections to hold the data
    TYPE t_xpaths IS TABLE OF VARCHAR2(100);
    TYPE t_values IS TABLE OF VARCHAR2(255);

    v_xpaths t_xpaths := t_xpaths(
        '/Document/Payment/Amount',
        '/Document/Payment/Date'
    );

    v_values t_values := t_values(
        '1000.00',
        '2025-01-26'
    );
BEGIN
    -- Call the procedure to insert the parameters
    add_mx_params(
        p_xpaths => v_xpaths,
        p_values => v_values
    );
END;
/
CREATE OR REPLACE PROCEDURE add_validation_params (
    p_fields IN SYS.ODCIVARCHAR2LIST,
    p_values IN SYS.ODCIVARCHAR2LIST
) AS
    -- Ensure the input collections have the same size
    l_count INTEGER := p_fields.COUNT;
BEGIN
    IF l_count != p_values.COUNT THEN
        RAISE_APPLICATION_ERROR(-20001, 'Input collections must have the same number of elements.');
    END IF;

    -- Bulk insert using FORALL
    FORALL i IN 1..l_count
        INSERT INTO validation_params (
            field,
            value,
            last_updated,
            last_updated_by
        ) VALUES (
            p_fields(i),
            p_values(i),
            SYSDATE,
            USER
        );
END add_validation_params;

DECLARE
    -- Define collections to hold field and value pairs
    l_fields SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST('Field1', 'Field2', 'Field3');
    l_values SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST('Value1', 'Value2', 'Value3');
BEGIN
    -- Call the procedure to insert the records
    add_validation_params(p_fields => l_fields, p_values => l_values);
END;

CREATE OR REPLACE PROCEDURE add_mx_params (
    p_xpaths IN SYS.ODCIVARCHAR2LIST,
    p_values IN SYS.ODCIVARCHAR2LIST
) AS
    -- Ensure the input collections have the same size
    l_count INTEGER := p_xpaths.COUNT;
BEGIN
    -- Debugging: Log the counts of the collections
    DBMS_OUTPUT.PUT_LINE('p_xpaths count: ' || l_count);
    DBMS_OUTPUT.PUT_LINE('p_values count: ' || p_values.COUNT);

    IF l_count != p_values.COUNT THEN
        RAISE_APPLICATION_ERROR(-20001, 'Input collections must have the same number of elements.');
    END IF;

    -- Debugging: Log the values of the collections
    FOR i IN 1..l_count LOOP
        DBMS_OUTPUT.PUT_LINE('p_xpaths(' || i || '): ' || p_xpaths(i));
        DBMS_OUTPUT.PUT_LINE('p_values(' || i || '): ' || p_values(i));
    END LOOP;

    -- Bulk insert using FORALL
    FORALL i IN 1..l_count
        INSERT INTO mx_params (
            xpath,
            value,
            last_updated,
            last_updated_by
        ) VALUES (
            p_xpaths(i),
            p_values(i),
            SYSDATE,
            USER
        );
END add_mx_params;

SET SERVEROUTPUT ON;

DECLARE
    v_xpaths SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST('/config/path1', '/config/path2');
    v_values SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST('Value1', 'Value2');
BEGIN
    add_mx_params(v_xpaths, v_values);
END;
