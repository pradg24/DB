-- Drop existing tables if they exist (optional)
-- DROP TABLE payment_template_validation;
-- DROP TABLE mx_templates;
-- DROP TABLE mt_templates;
-- DROP TABLE payment_templates;

-- Create payment_templates table
CREATE TABLE payment_templates (
    template_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    template_name VARCHAR2(100) NOT NULL,
    template_description VARCHAR2(255),
    last_updated DATE,
    last_updated_by VARCHAR2(50),
    CONSTRAINT chk_template_name_length CHECK (LENGTH(template_name) <= 100)
);

-- Create mx_templates table
CREATE TABLE mx_templates (
    template_id NUMBER PRIMARY KEY,
    key VARCHAR2(100) NOT NULL,
    value VARCHAR2(255),
    last_updated DATE,
    last_updated_by VARCHAR2(50),
    CONSTRAINT fk_payment_template_mx FOREIGN KEY (template_id)
        REFERENCES payment_templates(template_id)
        ON DELETE CASCADE
);

-- Create mt_templates table
CREATE TABLE mt_templates (
    template_id NUMBER PRIMARY KEY,
    key VARCHAR2(100) NOT NULL,
    value VARCHAR2(255),
    last_updated DATE,
    last_updated_by VARCHAR2(50),
    CONSTRAINT fk_payment_template_mt FOREIGN KEY (template_id)
        REFERENCES payment_templates(template_id)
        ON DELETE CASCADE
);

-- Create payment_template_validation table
CREATE TABLE payment_template_validation (
    template_id NUMBER,
    key VARCHAR2(100) NOT NULL,
    value VARCHAR2(255),
    CONSTRAINT fk_payment_template_validation FOREIGN KEY (template_id)
        REFERENCES payment_templates(template_id)
        ON DELETE CASCADE
);

-- Create Indexes for foreign keys
CREATE INDEX idx_payment_template_mx ON mx_templates (template_id);
CREATE INDEX idx_payment_template_mt ON mt_templates (template_id);
CREATE INDEX idx_payment_template_validation ON payment_template_validation (template_id);

-- Create Types for Key-Value Pairs
CREATE OR REPLACE TYPE key_value_pair AS OBJECT (
    key VARCHAR2(100),
    value VARCHAR2(255)
);

CREATE OR REPLACE TYPE dictionary AS TABLE OF key_value_pair;
/

-- Create Stored Procedure
CREATE OR REPLACE PROCEDURE insert_payment_template (
    p_template_name IN VARCHAR2,
    p_template_description IN VARCHAR2,
    p_message_type IN VARCHAR2,
    p_params IN dictionary,
    p_validation_params IN dictionary
)
IS
    v_template_id NUMBER;
BEGIN
    -- Insert into payment_templates
    INSERT INTO payment_templates (
        template_name,
        template_description,
        last_updated,
        last_updated_by
    ) VALUES (
        p_template_name,
        p_template_description,
        SYSDATE,
        USER -- Use the current database user
    ) RETURNING template_id INTO v_template_id;

    -- Insert into mx_templates or mt_templates based on message_type
    IF p_message_type = 'mx' THEN
        FOR i IN 1 .. p_params.COUNT LOOP
            INSERT INTO mx_templates (
                template_id,
                key,
                value,
                last_updated,
                last_updated_by
            ) VALUES (
                v_template_id,
                p_params(i).key,
                p_params(i).value,
                SYSDATE,
                USER -- Use the current database user
            );
        END LOOP;
    ELSIF p_message_type = 'mt' THEN
        FOR i IN 1 .. p_params.COUNT LOOP
            INSERT INTO mt_templates (
                template_id,
                key,
                value,
                last_updated,
                last_updated_by
            ) VALUES (
                v_template_id,
                p_params(i).key,
                p_params(i).value,
                SYSDATE,
                USER -- Use the current database user
            );
        END LOOP;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Invalid message type. Must be ''mx'' or ''mt''.');
    END IF;

    -- Insert into payment_template_validation
    FOR i IN 1 .. p_validation_params.COUNT LOOP
        INSERT INTO payment_template_validation (
            template_id,
            key,
            value
        ) VALUES (
            v_template_id,
            p_validation_params(i).key,
            p_validation_params(i).value
        );
    END LOOP;
END insert_payment_template;

DECLARE
    v_template_name VARCHAR2(100) := 'Template Name';
    v_template_description VARCHAR2(255) := 'Template Description';
    v_message_type VARCHAR2(2) := 'mx'; -- or 'mt' for MT message type
    v_params dictionary := dictionary(
        key_value_pair('param1', 'value1'),
        key_value_pair('param2', 'value2'),
        key_value_pair('param3', 'value3')
    );
    v_validation_params dictionary := dictionary(
        key_value_pair('validation1', 'value1'),
        key_value_pair('validation2', 'value2'),
        key_value_pair('validation3', 'value3')
    );
BEGIN
    insert_payment_template(v_template_name, v_template_description, v_message_type, v_params, v_validation_params);
END;
/
