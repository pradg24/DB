Create a complete Maven project for a UI automation framework in Java with the following requirements: > > Overview: > - Use Playwright for browser automation. > - Use TestNG as the test runner. > - Use SLF4J for logging (with a simple binding). > - Use Jackson for parsing JSON configuration files. > > Configuration: > - There is a test-config.properties file (located in src/test/resources) that defines general test settings. It should include the keys: > - browser (e.g., “firefox”, “chromium”, “webkit”), > - headless (true or false), and > - env (e.g., “dev”). > - The value of env is used to construct the name of an environment configuration JSON file by appending “.json” (e.g., if env=dev, load file “dev.json”). > - The environment JSON file contains the following keys: > - Name: the environment name. > - TestUrls: an array of objects with properties: > - App: the application name (e.g., “Reveal”, “RevealVideo”) > - BaseUrl: the URL for that app. > - TestDatabases: an array of objects with properties: > - Name: database name. > - ConnectionString: a connection string. > - TestUsers: an array of objects with properties: > - Email, Password, FirstName, LastName > - Optionally, IsAdmin, AccountName, and an array Tags > > Project Structure: > The project should have the following structure: > > > ui-automation-framework/ > ├── pom.xml > ├── testng.xml > └── src > ├── main > │ └── java > │ └── com > │ └── company > │ ├── uiautomation > │ │ ├── BaseTest.java > │ │ ├── BrowserManager.java > │ │ ├── ElementActions.java > │ │ ├── PlaywrightUIAutomation.java > │ │ ├── UIAutomation.java > │ │ ├── UIAutomationException.java > │ │ └── UIAutomationFactory.java > │ └── myproject > │ └── config > │ ├── EnvironmentConfig.java > │ ├── EnvironmentConfigLoader.java > │ ├── TestConfig.java > │ ├── TestUrl.java > │ ├── TestDatabase.java > │ └── TestUser.java > └── test > ├── java > │ └── com > │ └── company > │ └── myproject > │ └── tests > │ └── ClientConfigurableTest.java > └── resources > ├── test-config.properties > └── dev.json > > > Requirements for the Code Files: > > 1. pom.xml: Include dependencies for Playwright, TestNG, Jackson (jackson-databind), SLF4J API, and SLF4J Simple binding. Set Java source/target to 11. > > 2. testng.xml: Define a TestNG suite that runs tests in parallel with a thread count (e.g., 3). > > 3. Core Framework (src/main/java/com/company/uiautomation): > - UIAutomation.java: Define an interface with methods: launch(boolean headless), launch(boolean headless, String browserType), close(), gotoUrl(String), refresh(), click(String), doubleClick(String), hover(String), fill(String, String), getText(String), getAttribute(String, String), waitForElement(String, int), screenshot(String), and getPage(). > - UIAutomationException.java: A custom exception class. > - UIAutomationFactory.java: Provide a thread-local instance of a UIAutomation implementation. > - PlaywrightUIAutomation.java: Implement UIAutomation using Playwright. Use BrowserManager and ElementActions to perform actions. > - BrowserManager.java: Create and close the Playwright browser session. Support multiple browser types by reading the browserType parameter. > - ElementActions.java: Implement actions on the Playwright Page (click, doubleClick, hover, fill, getText, getAttribute, waitForElement, screenshot, refresh), and include logging and proper exception handling. > > 4. Configuration Code (src/main/java/com/company/myproject/config): > - TestConfig.java: Load the client’s test-config.properties file using Java’s Properties API. Provide static methods to get browser and headless values. > - EnvironmentConfig.java: POJO representing the environment JSON configuration (with fields: Name, TestUrls, TestDatabases, TestUsers). > - TestUrl.java: POJO with fields App and BaseUrl. > - TestDatabase.java: POJO with fields Name and ConnectionString. > - TestUser.java: POJO with fields Email, Password, FirstName, LastName, IsAdmin (optional), AccountName (optional), and Tags (list of strings). > - EnvironmentConfigLoader.java: Load the JSON configuration file. It should first load test-config.properties to read the property env (defaulting to “dev”), append “.json” to get the filename (e.g., “dev.json”), and then use Jackson to load that JSON into an EnvironmentConfig object. > > 5. BaseTest.java (src/main/java/com/company/uiautomation): > - Extend TestNG and provide @BeforeMethod and @AfterMethod methods. > - In @BeforeMethod, obtain a UIAutomation instance from UIAutomationFactory and launch the browser using client configuration values from TestConfig (for browser type and headless mode). Preload the environment configuration via EnvironmentConfigLoader; store it as a static field (envConfig). > - Provide helper methods such as getBaseUrl(String app), getTestDatabase(String name), and getTestUser(String email) that retrieve configurations from envConfig. > > 6. Sample Test (src/test/java/com/company/myproject/tests/ClientConfigurableTest.java): > - Extend BaseTest. In the test method, use helper methods (e.g., getBaseUrl("Reveal")) to navigate to a URL, assert the page title, take a screenshot, and additionally retrieve and print database and user configurations. > > 7. Test Resources (src/test/resources): > - test-config.properties: Example contents: > > browser=firefox > headless=false > env=dev > > - dev.json: An example JSON file containing: > - "Name": "dev" > - "TestUrls": array of objects with "App" and "BaseUrl". > - "TestDatabases": array of objects with "Name" and "ConnectionString". > - "TestUsers": array of objects with "Email", "Password", "FirstName", "LastName", and additional optional fields. > > Generate all the code files (including the contents for pom.xml, testng.xml, all Java classes, and sample configuration files) matching the project structure provided. > > The final project should be fully compilable and runnable via Maven and TestNG.
