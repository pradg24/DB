INSERT INTO actions (action, type, created_at, updated_at, updated_by)
VALUES ('Sample Action', 'Sample Type', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, USER);

ALTER TABLE mx_templates
ADD (MX_MESSAGE XMLType);

ALTER TABLE payment_templates
ADD (mx_message XMLType);

ALTER TABLE mx_templates RENAME TO mx_params;

ALTER TABLE mx_params RENAME COLUMN key TO xpath;
ALTER TABLE payment_template_validation RENAME TO validation_params;
ALTER TABLE validation_params RENAME COLUMN key TO field;
CREATE OR REPLACE TYPE validation_data AS OBJECT (
    field VARCHAR2(100),
    value VARCHAR2(255)
);

CREATE OR REPLACE PROCEDURE add_validation_params (
    p_group_name IN VARCHAR2,
    p_params IN validation_data_table
)
IS
BEGIN
    FOR i IN 1 .. p_params.COUNT LOOP
        INSERT INTO validation_params (
            group_name,
            field,
            value
        ) VALUES (
            p_group_name,
            p_params(i).field,
            p_params(i).value
        );
    END LOOP;
    COMMIT;
END add_validation_params;

DECLARE
    v_group_name VARCHAR2(100) := 'Group A';
    v_params validation_data_table := validation_data_table(
        validation_data('param1', 'value1'),
        validation_data('param2', 'value2'),
        validation_data('param3', 'value3')
    );
BEGIN
    add_validation_params(v_group_name, v_params);
END;

BEGIN
    add_test_suite(
        p_suite_name => 'Regression Suite',
        p_suite_description => 'This is a suite for regression testing.',
        p_is_parallel => 'Y'  -- 'Y' means parallel execution, 'N' would mean sequential
    );
END;

ALTER TABLE test_steps
ADD reference_type VARCHAR2(20)
DEFAULT 'CASE'
CHECK (reference_type IN ('CASE', 'PRECONDITION'));

ALTER TABLE test_steps
ADD CONSTRAINT fk_test_steps_precondition FOREIGN KEY (test_case_id)
REFERENCES preconditions(precondition_id)
ENABLE NOVALIDATE;

ALTER TABLE test_steps
ADD CONSTRAINT fk_test_steps_test_case FOREIGN KEY (test_case_id)
REFERENCES test_cases(test_case_id)
ENABLE NOVALIDATE;

ALTER TABLE test_steps
ADD CONSTRAINT chk_test_case_reference
CHECK (
    (reference_type = 'CASE' AND test_case_id IN (SELECT test_case_id FROM test_cases)) OR
    (reference_type = 'PRECONDITION' AND test_case_id IN (SELECT precondition_id FROM preconditions))
);
SELECT constraint_name, table_name
FROM user_constraints
WHERE table_name = 'TEST_STEPS' AND constraint_name = 'FK_TEST_STEPS_TEST_CASE';

ALTER TABLE test_steps DROP CONSTRAINT fk_test_steps_test_case;

